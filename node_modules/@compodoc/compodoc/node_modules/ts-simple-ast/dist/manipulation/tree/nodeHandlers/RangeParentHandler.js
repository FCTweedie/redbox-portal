"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./../../../utils");
var StraightReplacementNodeHandler_1 = require("./StraightReplacementNodeHandler");
/**
 * Handler for deailing with a parent that is going to have a child replaced based on the range.
 */
var RangeParentHandler = /** @class */ (function () {
    function RangeParentHandler(compilerFactory, opts) {
        this.compilerFactory = compilerFactory;
        this.straightReplacementNodeHandler = new StraightReplacementNodeHandler_1.StraightReplacementNodeHandler(compilerFactory);
        this.start = opts.start;
        this.end = opts.end;
    }
    RangeParentHandler.prototype.handleNode = function (currentNode, newNode) {
        var currentNodeChildren = new utils_1.AdvancedIterator(currentNode.getChildrenIterator());
        var newNodeChildren = new utils_1.AdvancedIterator(newNode.getChildrenIterator());
        // get the first child
        while (!currentNodeChildren.done && !newNodeChildren.done && newNodeChildren.peek.getStart() < this.start)
            this.straightReplacementNodeHandler.handleNode(currentNodeChildren.next(), newNodeChildren.next());
        // handle the new nodes
        while (!newNodeChildren.done && newNodeChildren.peek.getStart() >= this.start && newNodeChildren.peek.getEnd() <= this.end)
            newNodeChildren.next().setSourceFile(currentNode.sourceFile);
        // handle the rest
        while (!currentNodeChildren.done)
            this.straightReplacementNodeHandler.handleNode(currentNodeChildren.next(), newNodeChildren.next());
        // ensure the new children iterator is done too
        if (!newNodeChildren.done)
            throw new Error("Error replacing tree: Should not have more children left over."); // todo: better error message
        this.compilerFactory.replaceCompilerNode(currentNode, newNode.compilerNode);
    };
    return RangeParentHandler;
}());
exports.RangeParentHandler = RangeParentHandler;

//# sourceMappingURL=RangeParentHandler.js.map
