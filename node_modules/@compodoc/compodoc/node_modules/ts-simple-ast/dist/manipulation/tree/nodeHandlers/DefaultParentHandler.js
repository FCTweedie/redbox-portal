"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./../../../utils");
var StraightReplacementNodeHandler_1 = require("./StraightReplacementNodeHandler");
/**
 * Handler for deailing with a parent that is going to have a child replaced.
 */
var DefaultParentHandler = /** @class */ (function () {
    function DefaultParentHandler(compilerFactory, opts) {
        this.compilerFactory = compilerFactory;
        this.straightReplacementNodeHandler = new StraightReplacementNodeHandler_1.StraightReplacementNodeHandler(compilerFactory);
        this.childCount = opts.childCount;
        this.isFirstChild = opts.isFirstChild;
        this.replacingNodes = opts.replacingNodes;
    }
    DefaultParentHandler.prototype.handleNode = function (currentNode, newNode) {
        var currentNodeChildren = new utils_1.AdvancedIterator(currentNode.getChildrenIterator());
        var newNodeChildren = new utils_1.AdvancedIterator(newNode.getChildrenIterator());
        var count = this.childCount;
        // get the first child
        while (!currentNodeChildren.done && !newNodeChildren.done && !this.isFirstChild(currentNodeChildren.peek, newNodeChildren.peek))
            this.straightReplacementNodeHandler.handleNode(currentNodeChildren.next(), newNodeChildren.next());
        // try replacing any nodes
        while (!currentNodeChildren.done && this.tryReplaceNode(currentNodeChildren.peek))
            currentNodeChildren.next();
        // add or remove the items
        if (count > 0) {
            while (count > 0) {
                newNodeChildren.next().setSourceFile(currentNode.sourceFile);
                count--;
            }
        }
        else if (count < 0) {
            while (count < 0) {
                currentNodeChildren.next().dispose();
                count++;
            }
        }
        // handle the rest
        while (!currentNodeChildren.done)
            this.straightReplacementNodeHandler.handleNode(currentNodeChildren.next(), newNodeChildren.next());
        // ensure the new children iterator is done too
        if (!newNodeChildren.done)
            throw new Error("Error replacing tree: Should not have more children left over."); // todo: better error message
        this.compilerFactory.replaceCompilerNode(currentNode, newNode.compilerNode);
    };
    DefaultParentHandler.prototype.tryReplaceNode = function (currentNode) {
        if (this.replacingNodes == null || this.replacingNodes.length === 0)
            return false;
        var index = this.replacingNodes.indexOf(currentNode);
        if (index === -1)
            return false;
        this.replacingNodes.splice(index, 1);
        currentNode.dispose();
        return true;
    };
    return DefaultParentHandler;
}());
exports.DefaultParentHandler = DefaultParentHandler;

//# sourceMappingURL=DefaultParentHandler.js.map
