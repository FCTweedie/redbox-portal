import * as ts from "typescript";
import { Node } from "./../common";
import { VariableStatementStructure } from "./../../structures";
import { ExportableNode, ModifierableNode, AmbientableNode, DocumentationableNode } from "./../base";
import { NamespaceChildableNode } from "./../namespace";
import { VariableDeclaration } from "./VariableDeclaration";
import { VariableDeclarationType } from "./VariableDeclarationType";
export declare const VariableStatementBase: (new (...args: any[]) => NamespaceChildableNode) & (new (...args: any[]) => DocumentationableNode) & (new (...args: any[]) => AmbientableNode) & (new (...args: any[]) => ExportableNode) & (new (...args: any[]) => ModifierableNode) & typeof Node;
export declare class VariableStatement extends VariableStatementBase<ts.VariableStatement> {
    /**
     * Get the variable declarations.
     */
    getDeclarations(): VariableDeclaration[];
    /**
     * Gets the variable declaration type.
     */
    getDeclarationType(): VariableDeclarationType;
    /**
     * Gets the variable declaration type keyword.
     */
    getDeclarationTypeKeyword(): Node;
    /**
     * Sets the variable declaration type.
     * @param type - Type to set.
     */
    setDeclarationType(type: VariableDeclarationType): this;
    /**
     * Fills the node from a structure.
     * @param structure - Structure to fill.
     */
    fill(structure: Partial<VariableStatementStructure>): this;
    /**
     * Removes this variable statement.
     */
    remove(): void;
}
