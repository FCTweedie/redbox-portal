"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var manipulation_1 = require("./../../manipulation");
var errors = require("./../../errors");
var common_1 = require("./../common");
var base_1 = require("./../base");
var namespace_1 = require("./../namespace");
var callBaseFill_1 = require("./../callBaseFill");
var VariableDeclarationType_1 = require("./VariableDeclarationType");
exports.VariableStatementBase = namespace_1.NamespaceChildableNode(base_1.DocumentationableNode(base_1.AmbientableNode(base_1.ExportableNode(base_1.ModifierableNode(common_1.Node)))));
var VariableStatement = /** @class */ (function (_super) {
    __extends(VariableStatement, _super);
    function VariableStatement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get the variable declarations.
     */
    VariableStatement.prototype.getDeclarations = function () {
        var _this = this;
        return this.compilerNode.declarationList.declarations.map(function (d) { return _this.global.compilerFactory.getNodeFromCompilerNode(d, _this.sourceFile); });
    };
    /**
     * Gets the variable declaration type.
     */
    VariableStatement.prototype.getDeclarationType = function () {
        var nodeFlags = this.compilerNode.declarationList.flags;
        if (nodeFlags & ts.NodeFlags.Let)
            return VariableDeclarationType_1.VariableDeclarationType.Let;
        else if (nodeFlags & ts.NodeFlags.Const)
            return VariableDeclarationType_1.VariableDeclarationType.Const;
        else
            return VariableDeclarationType_1.VariableDeclarationType.Var;
    };
    /**
     * Gets the variable declaration type keyword.
     */
    VariableStatement.prototype.getDeclarationTypeKeyword = function () {
        var declarationType = this.getDeclarationType();
        var declarationList = this.getNodeProperty("declarationList");
        switch (declarationType) {
            case VariableDeclarationType_1.VariableDeclarationType.Const:
                return declarationList.getFirstChildByKindOrThrow(ts.SyntaxKind.ConstKeyword);
            case VariableDeclarationType_1.VariableDeclarationType.Let:
                return declarationList.getFirstChildByKindOrThrow(ts.SyntaxKind.LetKeyword);
            case VariableDeclarationType_1.VariableDeclarationType.Var:
                return declarationList.getFirstChildByKindOrThrow(ts.SyntaxKind.VarKeyword);
            default:
                throw errors.getNotImplementedForNeverValueError(declarationType);
        }
    };
    /**
     * Sets the variable declaration type.
     * @param type - Type to set.
     */
    VariableStatement.prototype.setDeclarationType = function (type) {
        if (this.getDeclarationType() === type)
            return this;
        var keyword = this.getDeclarationTypeKeyword();
        manipulation_1.insertIntoParent({
            childIndex: keyword.getChildIndex(),
            insertItemsCount: 1,
            insertPos: keyword.getStart(),
            newText: type,
            parent: this.getNodeProperty("declarationList"),
            replacing: {
                nodes: [keyword],
                textLength: keyword.getWidth()
            }
        });
        return this;
    };
    /**
     * Fills the node from a structure.
     * @param structure - Structure to fill.
     */
    VariableStatement.prototype.fill = function (structure) {
        callBaseFill_1.callBaseFill(exports.VariableStatementBase.prototype, this, structure);
        if (structure.declarationType != null)
            this.setDeclarationType(structure.declarationType);
        if (structure.declarations != null)
            throw new errors.NotImplementedError("Filling variable declarations not implemented. Please open an issue if you need this and I will increase the prioirty.");
        return this;
    };
    /**
     * Removes this variable statement.
     */
    VariableStatement.prototype.remove = function () {
        manipulation_1.removeStatementedNodeChild(this);
    };
    return VariableStatement;
}(exports.VariableStatementBase));
exports.VariableStatement = VariableStatement;

//# sourceMappingURL=VariableStatement.js.map
